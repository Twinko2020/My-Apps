import sys
import os
import random
import time
import pickle
import pygame
from time import sleep
import winsound
from playsound import playsound

weapons = {"Pistol": 40, "Rifle 224": 200, "Sledge hammer": 150, "Sword and shield": 300}
armors = {"Leather armor": 60, "Scrap armor": 100, "Metal armor": 200}

class Player:

    def __init__(self, name):
        self.name = name
        self.max_health = 100
        self.health = self.max_health
        self.base_attack = 10
        self.base_defense = 1
        self.gold = 500
        self.potions = 0
        self.weapons = ["Knife"]
        self.armors = ["Cloth"]
        self.current_weapon = "Knife"
        self.current_armor = "Cloth"

    @property
    def defense(self):
        defense = self.base_defense

        if self.current_armor == "Cloth":
            defense = 1

        if self.current_weapon == "Sword and Shield":
            defense = 3

        if self.current_armor == "Leather armor":
            defense = 4
        return defense

    @property
    def attack(self):
        attack = self.base_attack

        if self.current_weapon == "Knife":
            attack = 15

        if self.current_weapon == "Pistol":
            attack = 25

        if self.current_weapon == "Rifle 224":
            attack = 35

        if self.current_weapon == "Sledge Hammer":
            attack = 45

        if self.current_weapon == "Sword and Shield":
            attack = 25
        return attack


class Zombie_Weak:
    def __init__(self, name):
        self.name = name
        self.max_health = 30
        self.health = self.max_health
        self.attack = 10
        self.defense = 0
        self.gold_drop = random.randint(0, 6)
        self.potion_drop = random.randint(0,1)


Zombie_WeakIG = Zombie_Weak("Rotten")


class Zombie_Light:
    def __init__(self, name):
        self.name = name
        self.max_health = 50
        self.health = self.max_health
        self.attack = 15
        self.defense = 2
        self.gold_drop = random.randint(0, 10)
        self.potion_drop = random.randint(0,2)

Zombie_LightIG = Zombie_Light("Walker")


class Zombie_Heavy:
    def __init__(self, name):
        self.name = name
        self.max_health = 100
        self.health = self.max_health
        self.attack = 20
        self.defense = 5
        self.gold_drop = random.randint(0, 18)
        self.potion_drop = random.randint(1,2)

Zombie_HeavyIG = Zombie_Heavy("Beast")


def main():
    music_main()
    os.system("cls")
    print("◄► I AM NOT BITTEN ◄►\n")
    print("\n ◄◄◄ MAIN MENU ►►►\n")
    print("1.) New Game")
    print("2.) Load Game")
    print("3.) Credits")
    print("4.) Exit\n")
    option = input("•► ")
    if option == "1":
        start()
    elif option == "2":
        if os.path.exists("savefile") == True:
            os.system("cls")
            with open("savefile", "rb") as f:
                global PlayerIG
                PlayerIG = pickle.load(f)
            print("Game has been loaded")
            option = input("•► ")
            start1()
        else:
            print("You have no save file")
            option = input("•► ")
            main()
    elif option == "3":
        os.system("cls")
        credit_header = "\n ◄◄◄ CREDITS ►►► \n"
        credit_body = """\n     TWINKO
\nDeveloper: Orkhan Nasirli
Scenario: Chingiz Nasirli
Special thanks: Vincent Gizzarelli (youtube tutorials)\n"""
        music_credits()
        for char in credit_header:
            sys.stdout.write(char)
            sys.stdout.flush()
            if char != "\n":
                time.sleep(0.1)
            else:
                time.sleep(0.02)
        for char in credit_body:
            sys.stdout.write(char)
            sys.stdout.flush()
            if char != "\n":
                time.sleep(0.15)
            else:
                time.sleep(0.02)
        option = input("•► ")
        winsound.PlaySound(None, winsound.SND_ASYNC)
        main()

    elif option == "4":
        sys.exit()
    else:
        main()

def music_credits():
    winsound.PlaySound("horror2.wav", winsound.SND_ASYNC | winsound.SND_ASYNC)

def music_main():
    winsound.PlaySound("horror_theme.wav", winsound.SND_ASYNC | winsound.SND_ASYNC)

def start():
    os.system("cls")
    nick_name_choose = "Please choose a nickname\n"
    for char in nick_name_choose:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(0.03)
        if char != "\n":
            time.sleep(0.03)
        else:
            time.sleep(0.1)
    option = input("► Nickname: ")
    reaction_to_name1 = "Meh, what a bad name -_-\n"
    reaction_to_name2 = "Hmmm... Fair enough :|\n"
    reaction_to_name3 = "Oh, well I like this name :)\n"
    random_reactions = random.choice([reaction_to_name1, reaction_to_name2, reaction_to_name3])
    for reac in random_reactions:
        sys.stdout.write(reac)
        sys.stdout.flush()
        time.sleep(0.03)
    global PlayerIG
    PlayerIG = Player(option)
    option = input("•► ")
    start1()


def start1():
    os.system("cls")
    print("Name: %s" % PlayerIG.name)
    print("Health: %i/%i" % (PlayerIG.health, PlayerIG.max_health))
    print("Attack: %i" % PlayerIG.attack)
    print("Defence: %i" % PlayerIG.defense)
    print("Gold: %d" % PlayerIG.gold)
    print("Weapon: %s" % PlayerIG.current_weapon)
    print("Armor: %s\n" % PlayerIG.current_armor)
    # Here main story of "I am not bitten" begins. You can print the introduction and give choices to player.
    # Fight and other options are given as an example code
    print("1.) Fight")
    print("2.) Store")
    print("3.) Inventory")
    print("4.) Save")
    print("5.) Exit\n")
    option = input("► ")
    if option == "1":
        pre_fight()
    elif option == "2":
        store()
    elif option == "3":
        inventory()
    elif option == "4":
        os.system("cls")
        with open("savefile", "wb") as f:
            pickle.dump(PlayerIG, f)
            print("\nGame has been saved\n")
        option = input("•► ")
        start1()
    elif option == "5":
        sys.exit()
    else:
        start1()


def pre_fight():
    os.system("cls")
    global enemy
    enemy_number = random.randint(1, 3)
    if enemy_number == 1:
        enemy = Zombie_WeakIG
    elif enemy_number == 2:
        enemy = Zombie_LightIG
    else:
        enemy = Zombie_HeavyIG
    fight()


def fight():
    os.system("cls")
    print("%s     vs     %s" % (PlayerIG.name, enemy.name))
    print("Player Health: %i/%i   %s's Health: %i/%i" % (
    PlayerIG.health, PlayerIG.max_health, enemy.name, enemy.health, enemy.max_health))
    print("Potions %i\n" % PlayerIG.potions)
    print("1.) Attack")
    print("2.) Use Potion")
    print("3.) Run\n")
    option = input("•► ")
    if option == "1":
        attack()
    elif option == "2":
        use_potion()
    elif option == "3":
        run()
    else:
        fight()


def attack():
    os.system("cls")
    global player_attack
    global enemy_attack
    player_attack = random.uniform(PlayerIG.attack / 2, PlayerIG.attack)
    enemy_attack = random.uniform(enemy.attack / 2, enemy.attack)
    if player_attack == PlayerIG.attack / 2:
        print("Miss")
    else:
        enemy.health -= player_attack - enemy.defense
        print("You deal %i damage!" % player_attack)
    option = input("•► ")
    if enemy.health <= 0:
            win()
    os.system("cls")
    if enemy_attack == enemy.attack / 2:
        print("The enemy missed")
    else:
        PlayerIG.health -= enemy_attack - PlayerIG.defense
        print("The enemy deal %i damage" % enemy_attack)
    option = input("•► ")
    if PlayerIG.health <= 0:
        dead()
    else:
        fight()

def use_potion():
    os.system("cls")
    if PlayerIG.potions == 0:
        print("No potions!")
    else:
        PlayerIG.health += 50
        if PlayerIG.health > PlayerIG.max_health:
            PlayerIG.health = PlayerIG.max_health
        print ("Potion used!")
    option = input("•► ")
    fight()

def run():
    os.system("cls")
    random_num = random.randint(1,3)
    if random_num == 1:
        print("You have escaped!")
        option = input("•► ")
        start1()
    else:
        print("You couldn't escape!")
        option = input("•► ")
        os.system("cls")
        if enemy_attack == enemy.attack / 2:
            print("The enemy missed")
        else:
            PlayerIG.health -= enemy_attack
            print("The enemy deal %i damage" % enemy_attack)
        option = input("•► ")
        if PlayerIG.health <= 0:
            dead()
        else:
            fight()

def win():
    os.system("cls")
    enemy.health = enemy.max_health
    PlayerIG.gold += enemy.gold_drop
    PlayerIG.potions += enemy.potion_drop
    print("You have killed the %s" % enemy.name)
    print("You found %i gold" % enemy.gold_drop)
    print("You found %i potion" % enemy.potion_drop)
    option = input("•► ")
    start1()

def dead():
    os.system("cls")
    print("You Died")
    option = input("•► ")
    main()

def store():
    os.system("cls")
    print("\n◄► STORE ◄►\n")
    print("Welcome to my shop!")
    print("\nWhat would you like to buy?\n")
    print("\nWrite the name of the item you want to buy\n")
    print("1.)Pistol")
    print("2.)Leather armor")
    print("3.)Exit\n")
    option = input("•► ")

    if option in weapons:
        if option in PlayerIG.weapons:
            print("You already have this weapon!")
            store()
        elif PlayerIG.gold >= weapons[option]:
            os.system("cls")
            PlayerIG.gold -= weapons[option]
            PlayerIG.weapons.append(option)
            print("%s received!" % option)
            option = input("•► ")
            store()
        else:
            os.system("cls")
            print("Not enough gold!")
            option = input("•► ")
            store()

    elif option in armors:
        if option in PlayerIG.armors:
            print("You already have this armor!")
            store()
        elif PlayerIG.gold >= armors[option]:
            os.system("cls")
            PlayerIG.gold -= armors[option]
            PlayerIG.armors.append(option)
            print("%s received!" % option)
            option = input("•► ")
            store()
        else:
            os.system("cls")
            print("Not enough gold!")
            option = input("•► ")
            store()

    elif option == "3":
        start1()

    else:
        os.system("cls")
        print("Unfortunately we dont have that item in our stock yet")
        option = input("•► ")
        store()

def inventory():
    os.system("cls")
    print("\n◄► INVENTORY ◄►\n")
    print("1.) Equip weapon")
    print("2.) Equip armor")
    print("3.) Map")
    print("4.) ←-Go back\n")
    option = input("•► ")
    if option == "1":
        equip_wep()
    elif option == "2":
        equip_arm()
    elif option == "3":
        map()
    elif option == "4":
        start1()
    else:
        inventory()

def equip_wep():
    os.system("cls")
    print("Choose weapon to equip:\n")
    for weapon in PlayerIG.weapons:
        print(weapon)
    print("\n2.) ←-Go back\n")
    option = input("•► ")
    if option == PlayerIG.current_weapon:
        print("%s is already equiped" & option)
        option = input("•► ")
        equip_wep()
    elif option == "2":
        inventory()
    elif option in PlayerIG.weapons:
        PlayerIG.current_weapon = option
        print("%s is equipped" % PlayerIG.current_weapon)
        option = input("•► ")
        equip_wep()
    else:
        print("You don't have %s in your inventory" % option)
        equip_wep()

def equip_arm():
    os.system("cls")
    print("Choose armor to equip:\n")
    for armor in PlayerIG.armors:
        print(armor)
    print("\n2.) ←-Go back\n")
    option = input("•► ")
    if option == PlayerIG.current_armor:
        print("% is already eqipped" % option)
        option = input("•► ")
        equip_arm
    elif option == "2":
        inventory()
    elif option in PlayerIG.armors:
        PlayerIG.current_armor =  option
        print("%s is equipped" % option)
        option = input("•► ")
        equip_arm
    else:
        print("You don't have %s in your inventory" % option)
        equip_arm

def map():
    os.system("cls")
    pass

main()
